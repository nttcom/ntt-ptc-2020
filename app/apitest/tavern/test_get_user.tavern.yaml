---
test_name: Get User Success Testcase

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token
  - name: Get user Success when audience request self information
    request:
      url: "{tavern.env_vars.url}/users/{user.id:d}"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      headers:
        content-type: application/json
      json:
        user_id: !int "{user.id:d}"
        username: "{user.username:s}"
        role: "{user.role:s}"

  - type: ref
    id: login_get_token_of_artist
  - name: Get user Success when artist request self information
    request:
      url: "{tavern.env_vars.url}/users/{artist.id:d}"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      headers:
        content-type: application/json
      json:
        user_id: !int "{artist.id:d}"
        username: "{artist.username:s}"
        role: "{artist.role:s}"

  - type: ref
    id: login_get_token_of_owner
  - name: Get user Success when owner request self information
    request:
      url: "{tavern.env_vars.url}/users/{owner.id:d}"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      headers:
        content-type: application/json
      json:
        user_id: !int "{owner.id:d}"
        username: "{owner.username:s}"
        role: "{owner.role:s}"
  - name: Get user Success when owner request a audience user information
    request:
      url: "{tavern.env_vars.url}/users/{user.id:d}"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      headers:
        content-type: application/json
      json:
        user_id: !int "{user.id:d}"
        username: "{user.username:s}"
        role: "{user.role:s}"
  - name: Get user Success when owner request a artist user information
    request:
      url: "{tavern.env_vars.url}/users/{artist.id:d}"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      headers:
        content-type: application/json
      json:
        user_id: !int "{artist.id:d}"
        username: "{artist.username:s}"
        role: "{artist.role:s}"


---
test_name: Get User return 400

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token
  - name: Return 400 when request with invalid user_id
    request:
      url: "{tavern.env_vars.url}/users/user_id"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400


---
test_name: Get User return 401

includes:
  - !include auth_stage.yaml

stages:
  - name: Return 401 when No Login
    request:
      url: "{tavern.env_vars.url}/users/{user.id:d}"
      method: GET
    response:
      status_code: 401


---
test_name: Get User return 403

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token
  - name: Return 403 when audience request other user information
    request:
      url: "{tavern.env_vars.url}/users/2"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 403

  - type: ref
    id: login_get_token_of_artist
  - name: Return 403 when artist request other user information
    request:
      url: "{tavern.env_vars.url}/users/{user.id:d}"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 403


---
test_name: Get User return 404

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token_of_owner
  - name: Return 404 when requested user dosen't exist
    request:
      url: "{tavern.env_vars.url}/users/999999"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 404
  - name: Return 404 when requested user id is negative
    request:
      url: "{tavern.env_vars.url}/users/-1"
      method: GET
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 404
