---
test_name: Success test case for `POST /api/events/:event_id/reservations`

includes:
  - !include auth_stage.yaml
  - !include reservation_stage.yaml

stages:
  - type: ref
    id: login_get_token

  - name: Success to create a reservations
    request:
      url: "{tavern.env_vars.url}/events/{resv_event.id:d}/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: 3
    response:
      status_code: 201
      headers:
        content-type: application/json
      json:
        id: !anyint
        user_id: !int "{user.id:d}"
        username: "{user.username:s}"
        event_id: !int "{resv_event.id:d}"
        event_name: !anystr
        event_price: !anyint
        event_start_at: !re_fullmatch "[0-9]{4}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9]Z"
        event_end_at: !re_fullmatch "[0-9]{4}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9]Z"
        venue_name: !anystr
        num_of_resv: !anyint
        created_at: !anystr
        updated_at: !anystr
      save:
        json:
          created_resv_id: id

  - type: ref
    id: delete_reservation

---
test_name: Create reservation return 400

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token
  - name: Return 400 when num_of_resv is NULL
    request:
      url: "{tavern.env_vars.url}/events/4/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json: {}
    response:
      status_code: 400
      headers:
        content-type: application/json
      json:
        message: !anystr

  - name: Return 400 when num_of_resv is 0
    request:
      url: "{tavern.env_vars.url}/events/4/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: 0
    response:
      status_code: 400
      headers:
        content-type: application/json
      json:
        message: !anystr

  - name: Return 400 when num_of_resv is invalid data
    request:
      url: "{tavern.env_vars.url}/events/4/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: "invalid"
    response:
      status_code: 400
      headers:
        content-type: application/json
      json:
        message: !anystr


  - name: Return 400 when event_id is invalid type
    request:
      url: "{tavern.env_vars.url}/events/invalid/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: 1
    response:
      status_code: 400
      headers:
        content-type: application/json
      json:
        message: !anystr

---
test_name: Create reservation return 401
stages:
  - name: Return 401 when No Login
    request:
      url: "{tavern.env_vars.url}/events/4/reservations"
      method: POST
      json:
        num_of_resv: 1
    response:
      status_code: 401

---
test_name: Create reservation return 403

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token_of_artist
  - name: Return 403 when artist requests
    request:
      url: "{tavern.env_vars.url}/events/4/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: 1
    response:
      status_code: 403
      headers:
        content-type: application/json
      json:
        message: !anystr

  - type: ref
    id: login_get_token_of_owner
  - name: Return 403 when owner requests
    request:
      url: "{tavern.env_vars.url}/events/4/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: 1
    response:
      status_code: 403
      headers:
        content-type: application/json
      json:
        message: !anystr

---
test_name: Create reservation return 404

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token
  - name: Return 404 when not exists event_id
    request:
      url: "{tavern.env_vars.url}/events/99999/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: 1
    response:
      status_code: 404
      headers:
        content-type: application/json
      json:
        message: !anystr

  - name: Return 404 when event_id is minus
    request:
      url: "{tavern.env_vars.url}/events/-1/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: 1
    response:
      status_code: 404
      headers:
        content-type: application/json
      json:
        message: !anystr
---
test_name: Create reservation return 409

includes:
  - !include auth_stage.yaml
  - !include reservation_stage.yaml

stages:
  - type: ref
    id: login_get_token
  - type: ref
    id: create_reservation
  - name: Return 409 when has already reserved this event by own
    request:
      url: "{tavern.env_vars.url}/events/{resv_event.id:d}/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: 1
    response:
      status_code: 409
      headers:
        content-type: application/json
      json:
        message: !anystr
  - type: ref
    id: delete_reservation

  - name: Return 409 when to many num_of_resv
    request:
      url: "{tavern.env_vars.url}/events/{resv_event.id:d}/reservations"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
      json:
        num_of_resv: 100000
    response:
      status_code: 409
      headers:
        content-type: application/json
      json:
        message: !anystr
