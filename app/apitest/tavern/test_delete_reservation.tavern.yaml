---
test_name: Success test case for `DELETE /api/users/`

includes:
  - !include auth_stage.yaml
  - !include reservation_stage.yaml

stages:
  - type: ref
    id: login_get_token
  - type: ref
    id: create_reservation
  - name: Success to cancel reservation
    request:
      url: "{tavern.env_vars.url}/reservations/{created_resv_id:d}"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 204

  - type: ref
    id: login_get_token
  - type: ref
    id: create_reservation
  - type: ref
    id: login_get_token_of_owner
  - name: Success to cancel reservation by owner
    request:
      url: "{tavern.env_vars.url}/reservations/{created_resv_id:d}"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 204

---
test_name: Cancel reservation return 400

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token
  - name: Return 400 when reservation_id is invalid type
    request:
      url: "{tavern.env_vars.url}/reservations/invalid"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      headers:
        content-type: application/json
      json:
        message: !anystr

---
test_name: Cancel reservation return 401
stages:
  - name: Return 401 when No Login
    request:
      url: "{tavern.env_vars.url}/reservations/1"
      method: DELETE
    response:
      status_code: 401

---
test_name: Cancel reservation return 403

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token_of_artist
  - name: Return 403 when artist requests
    request:
      url: "{tavern.env_vars.url}/reservations/1"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 403
      headers:
        content-type: application/json
      json:
        message: !anystr

  - type: ref
    id: login_get_token
  - name: Return 403 when other audience requests
    request:
      url: "{tavern.env_vars.url}/reservations/4"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 403
      headers:
        content-type: application/json
      json:
        message: !anystr

---
test_name: Cancel reservation return 404

includes:
  - !include auth_stage.yaml

stages:
  - type: ref
    id: login_get_token
  - name: Return 404 when not exists reservation_id
    request:
      url: "{tavern.env_vars.url}/reservations/999999"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 404
      headers:
        content-type: application/json
      json:
        message: !anystr

  - name: Return 404 when reservation_id is minus
    request:
      url: "{tavern.env_vars.url}/reservations/-1"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 404
      headers:
        content-type: application/json
      json:
        message: !anystr
